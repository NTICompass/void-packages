# Template file for 'ffmpeg-crystalhd'
pkgname=ffmpeg-crystalhd
version=3.4.1
revision=2
short_desc="Decoding, encoding and streaming software (with CrystalHD support)"
maintainer="Juan RP <xtraeme@voidlinux.eu>"
license="GPL-3"
homepage="http://www.ffmpeg.org"
distfiles="${homepage}/releases/ffmpeg-${version}.tar.xz"
checksum=5a77278a63741efa74e26bf197b9bb09ac6381b9757391b922407210f0f991c0
wrksrc="ffmpeg-${version}"
conflicts="ffmpeg"

hostmakedepends="pkg-config perl yasm"
makedepends="zlib-devel bzip2-devel freetype-devel alsa-lib-devel libXfixes-devel
 libXext-devel libXvMC-devel libxcb-devel faad2-devel lame-devel libtheora-devel
 gnutls-devel libvorbis-devel x264-devel xvidcore-devel jack-devel SDL2-devel
 libcdio-paranoia-devel librtmp-devel freetype-devel libmodplug-devel
 speex-devel celt-devel harfbuzz-devel libass-devel opus-devel pulseaudio-devel
 ocl-icd-devel $(vopt_if x265 x265-devel) $(vopt_if vaapi libva-devel)
 $(vopt_if vdpau libvdpau-devel) $(vopt_if crystalhd libcrystalhd-devel) $(vopt_if v4l2 v4l-utils-devel) libbs2b-devel
 libvidstab-devel $(vopt_if faac faac-devel) $(vopt_if fdk_aac fdk-aac-devel)
 $(vopt_if vpx libvpx-devel)"

build_options="x265 v4l2 vaapi vdpau vpx faac fdk_aac crystalhd"
build_options_default="x265 v4l2 vpx crystalhd"

case "$XBPS_TARGET_MACHINE" in
	i686*|x86_64*) build_options_default+=" vaapi vdpau";;
	mips*) CFLAGS="-mnan=legacy";;
esac

do_configure() {
	# Fix gcc on x86_64-musl only
	if [ "$XBPS_TARGET_MACHINE" = "x86_64-musl" ]; then
		sed -i configure -e "s;_cflags_speed='-O3';_cflags_speed='-O2';"
	fi

	if [ "$CROSS_BUILD" ]; then
		case "$XBPS_TARGET_MACHINE" in
			arm*) _arch="arm";;
			aarch64*) _arch="aarch64";;
			mips*) _arch="mips";;
			*) _arch="${XBPS_TARGET_MACHINE%%-musl}";;
		esac

		_args+=" --enable-cross-compile
			--sysroot=$XBPS_CROSS_BASE
			--cross-prefix=${XBPS_CROSS_TRIPLET}-
			--target-os=linux --arch=${_arch}"
	fi

	./configure --prefix=/usr --disable-debug --enable-gpl --enable-gnutls \
		--enable-libcdio --enable-version3 --enable-runtime-cpudetect \
		--enable-libmp3lame --enable-libvorbis --enable-libxvid \
		--enable-libx264 $(vopt_if vpx --enable-libvpx) --enable-libtheora \
		--enable-shared --enable-static --enable-libxcb \
		--enable-libpulse --enable-libfreetype --enable-libmodplug \
		--enable-libspeex --enable-libcelt --enable-libass \
		--enable-libopus --enable-librtmp \
		$(vopt_if faac '--enable-nonfree --enable-libfaac') \
		$(vopt_if fdk_aac '--enable-nonfree --enable-libfdk-aac') \
		--disable-libopencore_amrnb --disable-libopencore_amrwb \
		--disable-libopenjpeg \
		--enable-postproc --enable-opencl ${_args} \
		$(vopt_if x265 '--enable-libx265' '--disable-libx265') \
		$(vopt_if v4l2 '--enable-libv4l2' '--disable-libv4l2') \
		$(vopt_enable vaapi) $(vopt_enable vdpau) $(vopt_enable crystalhd) \
		--enable-libbs2b --enable-avresample --enable-libvidstab
}
do_build() {
	rm ${XBPS_WRAPPERDIR}/strip
	make ${makejobs}
	make doc/ff{mpeg,play,server}.1
}
do_install() {
	make DESTDIR=${DESTDIR} install install-man
}

libavcodec-crystalhd_package() {
	short_desc="FFmpeg codec library (with CrystalHD support)"
	conflicts="libavcodec"
	pkg_install() {
		vmove "usr/lib/libavcodec.so.*"
	}
}
libavdevice-crystalhd_package() {
	short_desc="FFmpeg device handling library (with CrystalHD support)"
	conflicts="libavdevice"
	pkg_install() {
		vmove "usr/lib/libavdevice.so.*"
	}
}
libavresample-crystalhd_package() {
	short_desc="FFmpeg audio resampling library (with CrystalHD support)"
	conflicts="libavresample"
	pkg_install() {
		vmove "usr/lib/libavresample.so.*"
	}
}
libavformat-crystalhd_package() {
	short_desc="FFmpeg file format library (with CrystalHD support)"
	conflicts="libavformat"
	pkg_install() {
		vmove "usr/lib/libavformat.so.*"
	}
}
libavutil-crystalhd_package() {
	short_desc="FFmpeg utility library (with CrystalHD support)"
	conflicts="libavutil"
	pkg_install() {
		vmove "usr/lib/libavutil.so.*"
	}
}
libavfilter-crystalhd_package() {
	short_desc="FFmpeg audio/video filter library (with CrystalHD support)"
	conflicts="libavfilter"
	pkg_install() {
		vmove "usr/lib/libavfilter.so.*"
	}
}
libpostproc-crystalhd_package() {
	short_desc="FFmpeg video postprocessing library (with CrystalHD support)"
	conflicts="libpostproc"
	pkg_install() {
		vmove "usr/lib/libpostproc.so.*"
	}
}
libswscale-crystalhd_package() {
	short_desc="FFmpeg video scaling library (with CrystalHD support)"
	conflicts="libswscale"
	pkg_install() {
		vmove "usr/lib/libswscale.so.*"
	}
}
libswresample-crystalhd_package() {
	short_desc="FFmpeg video resampling library (with CrystalHD support)"
	conflicts="libswresample"
	pkg_install() {
		vmove "usr/lib/libswresample.so.*"
	}
}
ffmpeg-crystalhd-devel_package() {
	depends="
		libavcodec>=${version}_${revision}
		libavdevice>=${version}_${revision}
		libavformat>=${version}_${revision}
		libavutil>=${version}_${revision}
		libavfilter>=${version}_${revision}
		libpostproc>=${version}_${revision}
		libswscale>=${version}_${revision}
		libswresample>=${version}_${revision}
		libavresample>=${version}_${revision}"
	short_desc+=" - development files"
	conflicts="ffmpeg-devel"
	pkg_install() {
		vmove usr/include
		vmove usr/lib/pkgconfig
		vmove usr/lib/*.a
		vmove usr/lib/*.so
		vmove usr/share/ffmpeg/examples
		vmove usr/share/man/man3
	}
}
